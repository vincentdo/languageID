#!/usr/bin/env python
import sys
import optparse
from collections import defaultdict

optparser = optparse.OptionParser()
optparser.add_option("-t", "--train", dest="train", default="../data/train/", help="Data filename prefix (default=data)")
optparser.add_option("-s", "--suffix", dest="suffix", default="_train", help="Data filename suffix (default=_train")
optparser.add_option("-i", "--input", dest="input", default="../data/dev/dev_set", help="Name of input file (default=data/dev/dev_set")

(opts, _) = optparser.parse_args()

# List of languages expected
lang = ['eng', 'fra', 'deu', 'ita', 'spa']

suffix = opts.suffix
train_dir = opts.train
input_file = opts.input

# Building frequency vector
dicts = []
for i in xrange(len(lang)):
  sys.stderr.write("Processing " + lang[i] + " training data...")
  total = 0
  temp = defaultdict(float)
  for line in open(train_dir + lang[i] + suffix):
    for i in xrange(len(line)-3):
      # Extracting trigram
      temp[line.strip()[i:i+3]] += 1
      total += 1
      if total % 5000 == 0:
        sys.stderr.write(".")
  sys.stderr.write("\n")  
  dicts.append(temp)

# Function to calculate dot product given 
# two frequency vectors
def normalizedDotProduct(l, w):
  total = 0
  for key in l:
    total += l[key] + w[key]
  total /= (float)(len(l) * len(w))
  return total

# Classify language
sys.stderr.write("Training data complete - Classifying Inputs...")
for line in open(input_file):
  products = []
  total = 0 
  temp = defaultdict(float)    
  for j in xrange(len(line) - 3):
    temp[line.strip()[j:j+3]] += 1
    total += 1
  for d in dicts:
    products.append(normalizedDotProduct(temp, d))
  max_index = products.index(max(products))
  print lang[max_index]